Here is my idea of a rough outline for how the site backend could work:


__-_____Most basic features__________

Main URLs (accessed directly by user):

/index
Homepage for user who is not yet logged in. Describes site and encourages user to make an account or log in.

/login
Redirects to Okta registration/login page (if we go this route). After a user registers or logs in, they can be redirected to the 'dashboard' page.

/dashboard
A user's  default dashboard page. Shows list of user's own listings. Has links to the 'recent sightings' page and to the 'log sighting' page. Also useful for us because the user will be redirected here as soon as they make an account, so when they visit this page we will check if they have an entry in the SQL database. If they don't we will initialize a user entry for them. This can take care of 'create account' flow.

/log_sighting
The page that is used to add sightings of animals to the database. It has the appropriate input fields and javascript that sends an HTTP GET request to "/add_sighting_to_db/" as described below.

/recent_sightings
This page shows a table of the most recent sightings. It can get this information in JSON form from "/recent_sightings_info/" or maybe we can just the templates system in Flask to assemble this page without another call.


Other URLs (to perform actions on server):

/add_sighting_to_db/{animal_id}/{location_id}/{latitude}/{longitude}/{description}/
Makes an entry in the database for the given animal sighting with the given parameters. User id, time, sighting id and points are not taken as inputs, because we can get the user id from the accounts service, the time from the system time on the server, the sighting id can be generated by the server, and the points can just be initialized to 0.


/add_point_to_sighting/{sighting_id}/
Adds a point to the sighting with the given id. If we want to, we could make a check to see that the user hasn't already added a point to this particular sighting yet. This would involve extra info stored in the database (list of users who have voted for a sighting).


/get_recent_sightings/
If we don't just use templates for this, then this call could return a list of recent animal sightings and relevant info in JSON format.




_________More advanced features (if possible?)____________
Main URLs (accessed directly by user):

/user_sightings/{user_id}
Lists sightings by a particular user. If we have this feature, then we could have entries on the 'recent sightings' page have links for the usernames that go to this page (for the appropriate user).

/location_sightings/{location_id}
Lists sightings in a particular location. If we have this feature, then we could have entries on the 'recent sightings' page have links for the location names that go to this page (for the appropriate location).

/specific_animal_sightings/{animal_id}
Lists sightings of a particular animal type. If we have this feature, then we could have entries on the 'recent sightings' page have links for the animal type names that go to this page (for the appropriate animal).